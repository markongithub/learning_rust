use std::collections::HashMap;

#[derive(Debug)]
struct GameState {
    top_row: usize,
    top_row_by_column: Vec<usize>,
    rows_deleted: usize,
    spaces: Vec<Vec<bool>>,
}

type Coords = (usize, usize);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
enum Shape {
    HorizontalLine,
    Cross,
    BackwardL,
    VerticalLine,
    Square,
}

fn offsets_from_bottom_left(shape: Shape) -> Vec<Coords> {
    match shape {
        Shape::HorizontalLine => Vec::from([(0, 0), (1, 0), (2, 0), (3, 0)]),
        Shape::Cross => Vec::from([(0, 1), (1, 2), (1, 1), (1, 0), (2, 1)]),
        Shape::BackwardL => Vec::from([(0, 0), (1, 0), (2, 0), (2, 2), (2, 1)]),
        Shape::VerticalLine => Vec::from([(0, 0), (0, 1), (0, 2), (0, 3)]),
        Shape::Square => Vec::from([(0, 0), (0, 1), (1, 0), (1, 1)]),
    }
}

fn add_coords((x1, y1): Coords, (x2, y2): Coords) -> Coords {
    (x1 + x2, y1 + y2)
}

fn add_shape(state: &mut GameState, shape: Shape) -> Vec<Coords> {
    let bottom_left = if state.spaces.len() == 0 {
        (2, state.top_row + 3)
    } else {
        (2, state.top_row + 4)
    };

    let rows_needed = state.top_row + 9;
    if rows_needed > state.spaces.len() {
        //let new_rows_needed = rows_needed - state.spaces.len();
        /*        println!(
            "The vector has {} rows and {} capacity and I am going to add {} more.",
            state.spaces.len(),
            state.spaces.capacity(),
            new_rows_needed
        ); */
        for _i in 1..=(rows_needed - state.spaces.len()) {
            state.spaces.push(vec![false; 7]);
        }
    }
    offsets_from_bottom_left(shape)
        .iter()
        .map(|c| add_coords(bottom_left, *c))
        .collect()
}

fn is_empty(state: &GameState, (x, y): Coords) -> bool {
    !state.spaces[y][x]
}

fn move_left(state: &GameState, old_coords: Vec<Coords>) -> Vec<Coords> {
    if old_coords.iter().all(|(x, _)| *x > 0) {
        let new_coords: Vec<Coords> = old_coords.iter().map(|(x, y)| (*x - 1, *y)).collect();
        if new_coords.iter().all(|c| is_empty(state, *c)) {
            return new_coords;
        }
    }
    old_coords
}

fn move_right(state: &GameState, old_coords: Vec<Coords>) -> Vec<Coords> {
    if old_coords.iter().all(|(x, _)| *x < 6) {
        let new_coords: Vec<Coords> = old_coords.iter().map(|(x, y)| (*x + 1, *y)).collect();
        if new_coords.iter().all(|c| is_empty(state, *c)) {
            return new_coords;
        }
    }
    old_coords
}

fn move_down(state: &GameState, old_coords: &Vec<Coords>) -> Option<Vec<Coords>> {
    if old_coords.iter().all(|(_, y)| *y > 0) {
        let new_coords: Vec<Coords> = old_coords.iter().map(|(x, y)| (*x, *y - 1)).collect();
        if new_coords.iter().all(|c| is_empty(state, *c)) {
            return Some(new_coords);
        }
    }
    None
}

fn place_shape(state: &mut GameState, shape_coords: Vec<Coords>) {
    for (x, y) in shape_coords.iter() {
        state.spaces[*y][*x] = true;
        if *y > state.top_row {
            //println!("The top occupied row is now {}", *y);
            state.top_row = *y;
        }
        if *y > state.top_row_by_column[*x] {
            state.top_row_by_column[*x] = *y;
        }
    }
}

fn drop_shape(state: &mut GameState, jets: &Vec<bool>, next_jet: usize, shape: Shape) -> usize {
    //println!("New shape.");
    let mut coords = add_shape(state, shape);
    let mut current_jet = next_jet;
    loop {
        //println!("Shape is now occupying {:?}", coords);
        coords = if jets[current_jet] {
            //  println!("Gas pushes shape right.");
            move_right(state, coords)
        } else {
            //   println!("Gas pushes shape left.");
            move_left(state, coords)
        };
        current_jet += 1;
        if current_jet == jets.len() {
            current_jet = 0;
        }
        let try_to_move_down = move_down(state, &coords);
        if try_to_move_down.is_none() {
            // println!("Shape comes to rest.");
            break;
        }
        //   println!("Shape falls down a row.");
        coords = try_to_move_down.unwrap();
    }
    place_shape(state, coords);
    current_jet
}

fn purge_rows(state: &mut GameState) {
    let rows_to_remove = *state.top_row_by_column.iter().min().unwrap();
    state.spaces.drain(0..rows_to_remove);
    state.top_row -= rows_to_remove;
    for i in 0..7 {
        state.top_row_by_column[i] -= rows_to_remove;
    }
    state.rows_deleted += rows_to_remove;
    /*
    println!(
        "{} rows deleted total. Top row by column after this purge: {:?}",
        state.rows_deleted, state.top_row_by_column
    );*/
    //    println!("Successfully purged {} rows", rows_to_remove);
}

fn parse_input(input: &str) -> Vec<bool> {
    let mut output: Vec<bool> = vec![];
    for char in input.chars() {
        let bool_value = match char {
            '<' => false,
            '>' => true,
            c => panic!("I did not expect a {}", c),
        };
        output.push(bool_value);
    }
    output
}

fn solve_part1(input: &str) -> usize {
    solve_for_n_rocks(input, 2022)
}

fn solve_for_n_rocks(input: &str, n_rocks: usize) -> usize {
    let shapes_by_number: Vec<Shape> = Vec::from([
        Shape::HorizontalLine,
        Shape::Cross,
        Shape::BackwardL,
        Shape::VerticalLine,
        Shape::Square,
    ]);
    let jets = parse_input(input);
    //    println!("There are {} jets in our sequence.", jets.len());
    let mut state = GameState {
        top_row: 0,
        spaces: vec![],
        top_row_by_column: vec![0; 7],
        rows_deleted: 0,
    };
    let mut next_jet = 0;
    let purge_interval = 25; // bad with 5, works with 50
    let debug_interval = 1000;
    let mut time_to_next_purge = purge_interval;
    let mut time_to_next_debug = debug_interval;
    let mut shape_id = 0;
    let mut history: HashMap<(Vec<usize>, usize), (usize, usize)> = Default::default();
    let mut final_target = None;
    let mut deleted_slope = 0;
    let mut fallen_slope = 0;

    loop {
        let shape = shapes_by_number[shape_id % 5];
        if time_to_next_debug == 0 {
            /*            println!(
                "{} rocks have fallen so far. The next jet is {}. {} rows have been deleted. The top row looks like {:?}.",
                shape_id, next_jet, state.rows_deleted, state.top_row_by_column
            );*/
            time_to_next_debug = debug_interval;
        }
        time_to_next_debug -= 1;
        if Some(shape_id) == final_target || shape_id == n_rocks {
            break;
        }
        if time_to_next_purge == 0 {
            purge_rows(&mut state);
            /*            println!(
                "After the purge the top row looks like {:?}",
                state.top_row_by_column
            ); */
            time_to_next_purge = purge_interval;
            if final_target.is_none() {
                let clone_of_vector_for_lookup = state.top_row_by_column.clone();
                let historical_result = history.get(&(clone_of_vector_for_lookup, next_jet));
                if historical_result.is_some() {
                    let (previous_fallen, previous_deleted) = historical_result.unwrap();
                    /*
                    println!(
                        "We last saw ({:?},{}) when {} rocks had fallen",
                        state.top_row_by_column, next_jet, previous_fallen
                    ); */
                    fallen_slope = shape_id - previous_fallen;
                    deleted_slope = state.rows_deleted - previous_deleted;
                    let rocks_to_go = n_rocks - shape_id;
                    let rocks_to_go_fast = rocks_to_go % fallen_slope;
                    println!("So we have the same top shape and jet every {} rock falls. We have {} rocks left but I think we can cheat and only do {}.", fallen_slope, rocks_to_go, rocks_to_go_fast);
                    if rocks_to_go_fast == 0 {
                        break;
                    }
                    final_target = Some(shape_id + rocks_to_go_fast);
                } else {
                    let clone_of_vector_for_insert = state.top_row_by_column.clone();
                    /*
                    println!(
                        "Inserting with key ({:?}, {}) and value ({}, {})",
                        clone_of_vector_for_insert, next_jet, shape_id, state.rows_deleted
                    ); */
                    history.insert(
                        (clone_of_vector_for_insert, next_jet),
                        (shape_id, state.rows_deleted),
                    );
                }
            }
        }
        time_to_next_purge -= 1;
        next_jet = drop_shape(&mut state, &jets, next_jet, shape);
        shape_id += 1;
    }
    if shape_id == n_rocks {
        return state.top_row + state.rows_deleted + 1;
    }
    // so now we are out and we have deleted_slope and previous_deleted
    let rocks_to_go = n_rocks - shape_id;
    let iterations = rocks_to_go / fallen_slope;
    let future_lines_deleted = deleted_slope * iterations;
    println!(
        "We have done {} rocks and if we were doing the full thing we would have {} rocks to go. Every time we drop {} rocks we delete {} rows so I would expect us to do {} more iterations and delete {} more rows.",
        shape_id, rocks_to_go, fallen_slope, deleted_slope, iterations, future_lines_deleted
    );
    state.top_row + state.rows_deleted + future_lines_deleted + 1
}

// 1,000,000,000,000
fn solve_part2(input: &str) -> usize {
    solve_for_n_rocks(input, 1000 * 1000 * 1000 * 1000)
}

fn main() {
    let test_input = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
    println!(
        "Part 1 test: {:?} (should be 3068)",
        solve_part1(test_input)
    );
    let real_input = "><<<<><<>>><<<>>><<><<>>>><<><<>><><<<<>>>><<>>><<<>>>><<<<><<<<>>>><>>>><>>><<><>><<>><<<<>><<><<><>><<><>>><<<>><>>><<>><<>>><<<><>>><<>>><<<<>><<<<><<<><<>>><<<>>><>>><<<>>><<<<>>>><<<>>><<<>><<<<>><<<>>><<<>>><<>><<>><<<>><>><<<><<>><<<>>>><>>>><>><<>>>><<<<><<<<><<<<><<>>>><<<>>>><<<><<>>><<<><><<>><<>>><<>><>>><<>><<>>>><<<<><<<>>><<>>>><<>>>><<>><>>><<<<>>><<<>><<<<><>>><>><<<<>>><<>>><><<<>>><<<><<<>><<<<>>>><<<><<<><<>>>><<<>>><<><<>>>><<<<>><<>><<<<>>>><<<><<>>><<<<>>>><<<<>>>><<<<>><><>><<>>>><>>>><<<<>><>>><<<<>>><><<><<<>>>><><<<>><<>>><<<>>><<<>><<<><<>><<><<>>>><<>>><<<<><<<<><>>>><<>><<>>><<<>>>><<<<>>>><<<>>>><<>><>>>><><<<>>>><<<<><>>><>>><<>>>><>>><<<<><<>>><<<<><<>>><<>><<<>><<<<>>><<>>><<<>>><>>><<<<><>>><><<<<>>><>>><<<<><><<<<>>>><<>>><<<<>>><<<<>>>><>>>><<><<<<>>><<<<>><<<<>><<>><<<<>>>><<<>>>><<<<>>><>>>><<<<>><<<<>><<>>>><<<><<<>>>><<><<<<>>>><><<<<>><>><<>>>><<<<>>><<>>><<>>><<<>>>><>>><<<<>>>><>>><<>><<><<>><<><<><<<>>><>><<<>><<<><<<<><<<<>><<>><<<<>>>><<<<><<<<>>>><<><<><<<<>><<<>>><>>><<<<><><>><<>>><<><>>><<<>><<<<><<<<>>><<<>>>><<>><<><<<<>><<<<>>><<>><<>><<<<><>>>><><<>>>><>>><<<><>><<>>>><>>><<<<><<<<>>><<<>>><<<>>>><<<<><<<<>>>><<><<<<>>><<<>><<>>>><<>>><<>><<><<<<>>><<>><<><<<<>>><<<><<<<>>><<>>>><<<<>><>>>><<<<>>><<>>><<><<>><<<>>><<<<>>>><<<<>><<><<>><<<<>>>><><<<><><<<><<<><<<<>><>><<<>>><><<<><<<<><<<>><>>><<>><>>><<>><<>><><>>>><<<><>>><<>>>><<<>><<<>><<<<>>><<<<>>><<<<>>>><>><<<>><<>><<<><<>>>><>><<<><<<<>>><<><<<<>><<>>><<<<>>>><<<>>>><>>><<<>>><<<>>><<>><<<<>>>><<<<><><<<<>>>><<<>><<<<><<<<>>><<<<>>>><<>>><<<<>>>><<<<><<<><>>>><<>>>><<<<>><<<>>>><<<<>><<>>>><>><>>>><<<>><<>>>><<<>>>><<>><<<>>>><<<>><>><><<><>><>><<<>><<<>>><<>>><<<<>>><<<><<>>><<<<><>>>><<><>>>><<><<<>>>><><<<<>>><<<<>><<>>>><<<><<<>><<><>>><<>>>><<><>>>><<<<><>><<>><<<>>><>><<<>><<<<>>><<<<>><>><<><<<<><<<>>><><>>><<>>>><<><<<<>>><<>>><<<><<>>><><<<><>>><<><<<>>><<>>><<><<><<<<>>><<><<<<>><<<<>><>>>><<<<><>>>><<<<>>>><<>><<<<>>>><<<<><<<>>><<<<>>><<<<><<<><<>><>>>><>>><<<>>>><<<<>>><<<>><<<<>>>><<<>>><<<<>>><<<<>>><<<>>><<>><<<>><<<<>><<<<>>>><<>><<>><>>><<<<>>><<<<>>><<<<><<>>><><<<<>><<>>>><<><<>>><>><<<><>>><<<<><<>><<>>><><<>>><<<<><<<<><>>>><<>>><<>>>><<<>>><<>>><<<<>>><<>>>><>><><<<<>>>><>>><<<><<<<>>><<><<>>>><<<<>>>><>><>><<<>>>><>><><<>>><<<<><<<>>><<>>><><<>>>><<>>>><<<><<<>>><<<><<<>>><<<><<>>><<<<>><<<>><>>><>><<<<>>>><><<<<>>>><><<<<>>>><<<>>>><<>><<<>>><<<<>>>><<<>><<><>>>><<<>>><<<<><<<>>><<<>>><<>><<>>>><<>>><>><<<>>>><<>>>><<<><<>>><<<>><><<>>><<<<>>>><<<><<>>><>><>>>><><>>><><<<<>><<<><>>>><>><<<>><>>><<<><<><><<>><<<>>>><<<<>>>><>>>><<<><<<>><>>>><<>>>><<<>>><<><<<<><<<<>><<<>><<>>><<><><<<<>>><>>>><<<><>><<><>><>>>><><>>><<><<>><<<>>>><<>><<><<<><><<<>>>><<<<>><<<<>>><<<<>>>><>>><<<<><<>>>><><<>>><<<<>><<<>><<<>>>><><<<>><<<<><<<><<>>>><<<>>>><<<<>>><<<>>>><<<<>><<<>>><<<>>><>>>><<<<><<<<>><>>>><<>><<<<>>><<<<><<<<><<<<><<<<>>><<<>><<<>><<>>>><>><<<<><<><<>>><<>>>><<<><>><<<<><<<>>>><<<<><>><<<>>>><<<<>>>><<<>><<<><<<>>>><<>>>><<<>><><<<<>>>><<>>>><<<>>><>>>><<<<>><<<<>><>>><<<<>>><>>>><<<<>>><<>>><<<>>><<<>>><<<<>>><<<<>>>><<<<>><<<<>><>>><<<<>>><<<>>><<>><<<<><<>>><>>>><<<>>><<>>><<><<<>>>><<<>>><<>>>><<>>><><<<<>><>>>><>>><>>>><<<>><<>><<<<><<<><>><<<<>>>><<<><<>><<<<>><<>><<>><<>>><<<<>>><<<<><<<>>><>><>>>><<<>>><>>>><<<<>><<<<>><>>>><<>>><<<<>>><<>>><<<<><>>>><>><><<<<>><>>><<<<>><<<<>>>><<<>>>><<<<>><<<<><<<<>>><>>><<<<>><<<><<<><><<<>>><<>>>><<<<><<<<>>><<<<><<>>><<<>>><<<<>>>><<<>>><<<<><<><<>>>><>>>><<<<>>><<<<>>>><<>>>><<<>><<<<>><<>>>><<<>>>><<<<>>><<<<>>><<<><<><<<<>>>><<><<><>>>><<<>>><<<<>>><>><>>>><<<<>><<<>>>><<<>><>>><<>><>><<<<>>>><><<<>>>><<>>>><<<<><<<>>><<<<>><<<<>>>><<<><<<>><<>><<<>>>><<<>><>>>><<>>>><<<>><>><>>>><<<>>><<<<>>>><>><<>><><>>><<<<><<>><>><>>><<>><>><<<><<>>>><<>>>><<<>>>><<>>>><><<>>>><<<>><<<<>><<<<><<<<>>>><>>>><><>>><<<<>>>><<<>><<<>>><<<<>>><<><<<>>>><>>><>>><<<>>><<<><>>><<<><<<>>>><<>>><<<<>><<<<>><<<>><<<<>>><<<<>>>><<<<>>>><>>>><><<<<>><<<<>><<<<>>><<<<>>>><>>><<>><>>><>>>><>>><<<><>><>>><><>>><>><>>>><<<<>><<<>>>><<<>>><<<<>><<<<>>><>><><<<<>><<>><<<><<>><<<<>>><<<>><>><>><<><<<>>>><<<<>><<<<><<<<><<<>>>><<><<<<>><<<>>><<><<><>>><<>><<>>>><<<>><<>><>><<>><<<>>>><>>>><><>>>><<<<>>>><<>>>><<>>>><<<<><<>><><<<<>>><<>>>><<<<>>><>>>><<<>>>><<<>><<>>><<>>><<<>>><<<<>>><<><<<<><<<<>>><<>>><<<<>>><<<>>>><<<<>><<<<>>>><<<<>>>><<><>><<>>><<>><<<>>>><>>><>><<<<>>><>><<<<>>>><<<<>><><<<><>>>><><<>>><<<<>><<<<>>><>><>>><<<>>><><<<<>>><>>><<<<>>><>>><<<>><>>>><><<<<>>>><<<<>><<<><<<>><<<>>><<<>>><<>>><>>><<<<>><>>><>>><<<>><<>>><<><<<<>><>>>><>>>><<<>><><>>><<<><>><<<>>>><<>>><<<<>>>><<>>><<<<>><<<<>>>><<<<>>>><<>>><>>>><<<<>>>><<<>>>><<<<>>><<>><><>>><<<>>>><<>>>><>>><<<<>>><<>>><<>>><<<>><>>><>>><<><<<><<<><>><><>>>><<<>>>><<<<>>>><>>><<<>>><<<<>><<<<><<>>><<>>>><<<<>>><<<<>>>><<>><<<<>>><<<<>><<<>>><<>>>><<>>>><<<<>>><<>><>><>><>><<<>>>><<<<>>>><<<>>>><<<<>>>><<<<><<<>><<<>><<<><<>>><<<>><>><<>>><<<><<><<<>>><<<<>><><<>>><<>>>><<><<<>>>><><<<>>>><<<<>><<<>>>><<>>><<<<>>><<<<>>><<<<>>>><<>>>><<><<<<>><<><<>>>><<><<>>><<<>>>><<>>><<<<>>><<<>>><<>>>><<<>>>><<<<>>><<<<>>><<<<>>><<><<>>><<<<>><<<<>>><<<><<<>>>><<<<>>>><<><><<>>><<<<><<<>>>><<<>>>><<<<>>><>>><<>>>><>><<<<>>><<<<>>>><<>><<<<>>><<<>>>><<<>>>><<<<>><>>>><<<<>>>><<<>><>>><<<<><<<>>><<<<>>>><<<<>>><<>>>><<>>>><<<>>><<<<>><>>><<<<>><<<<>>>><>><<<>>>><<><<>>>><<<>>><<><>>>><<<>>><<<>>>><<<<><<<>><<<<><<<>>>><<<<>>>><<<>>>><<<>>><>>>><<<><>>><<<<><<<><>><>><>><<<<>>><<><<<>>><<>><<<<>>><<<<>>><<<<>>><<><<<<>>>><<>>><<<>><<<>><>><<<>>>><>>>><<<<>><<><<<>><<<<>><<>>><<<>>>><<<><><<<>>><><<<<>>><<>><<>><>><<<<>><<<<><>>>><><>>>><<<><<><<<>>><>>><<<>>><<<<><<<<><><<><<>><<>><<<<>>><>>>><<<<>><<><>><>>><>>>><<<>>><<><>><<<<><>>>><>>>><>>>><<>>>><<<>>><<>>><<<>>><>>>><<>><<>><<<<>>>><<<>>><<>><>><<<>>>><>>><<<>>><<<>>><<<<>>>><<><>><<<>>><<<>>>><>>><<><>><<<<>><<<<>>>><<<<>>>><<<>><<<<><>>>><<><><<>><>><><>>>><<<>><<<<><<<<><><><>>><>><<<<>>>><<>>>><>>>><<>><>>>><<<<>><<<<>>><><<<>><>>>><>>>><<>>>><<<<>>>><><<<<><><<<<><<<<><<<>><<<>>>><<<<>>>><>>>><<<<>><<>>>><<<<>>>><>>><<<>>>><<><>>><<<<>>>><<><<><<<>><>><<><<>><<<<>>>><>>>><<>>><<<<>>><>>>><<<>>><<<>><<<><<<><>>><>><>><<<>>>><<<<><>>>><<<<><<<<><<>>><<<>>><<<>><>>><<<>><<<>><<><<<<>><<<>>>><<<>>>><>>><<<>>>><>>>><<<><<>><>><<<<><>>>><<<<>><>>>><<<><<<<><>>><<<<>>>><<<<>>>><<<>><>><<<>>><<<><<<<>><<><>>><<>>>><>><><<<<>>>><<<<>>><<>><<><<<<><<<<>>><<<>><<><<><>>>><>><<<<><<<><<<<>><<<<>><<<>><<><<<<><<<>>>><<><<<<>><<<<>>>><>>><<<<><<<>>><>>>><>>>><<<>>>><<>>>><<>>><<>>>><<>><<<<>>><<<>>><<<<>><<><<>>>><>><<>>>><<<<><<<>>>><<<>>>><<<>>>><<<><<<>><>>><<<<>>><<>><<<><<>>>><<<><<>>>><<<<>><<<<>><>><><<<>><<>>>><<<>><<<<>>><<<><<<<><<<>>><<<><<<<>>>><<>>>><>><<<<>>><><<<>>><<>>>><<<<><<>><<>>><>><<<>>>><<<<>>>><<>>>><<<<><><<<<>><><>><>><<>>><<>>><<><<<><><<<><><<>>><<<<>>>><<<>>><<<>><<<<>><<<>>><<<<><>>>><<>>>><<<<><<<>><<<>>>><<>><<>>>><<<>><<><<<>>>><>>><<<>>>><<>><<<<>>><<>><<<<><<>>><<<<>>>><>>>><<<>>><>><>>>><>>>><<>>><>>>><>>><<>>><<>>><<<>>><<<<>><>>>><<><<>>><<<>>>><<<<>>><<<><<<>>><<<>>><<>><>>><><<<><<>>><<>><<<>><<>>>><<>>>><>>>><<<>>><<<>>>><<<<>>>><><<<<>><<<>><<><<<<>><<<<><>>><>><>>><>>>><<>>><>>><<<<><<<<><<<>><>>>><>><<>>><><<<>>>><<<>>>><>>>><<<<>>><<<<>>>><<<>>><<<><>>>><><<<>><>>>><<><<<><<<>>><<>>><>>><<<<>>>><<><<<<>>>><<>>><<<<>>>><<<><<<<><>>><<<><>>><<<<>>><<<<><><<<<>><<<>><<<<><<<>><>>><>><<>>>><<>>><<<<>>><>>><<><<<<>>><>><<<<>>><><><<>>>><<<>>>><<>>>><<<<><>>>><<<<>><<>>>><>><<<>>><<>><>>><<<><<<>><<<><<>>><>>><<><<>><<<<><<>>>><<>>>><<<>>><<<<>><<<>><<<>>><<<>><<<<>>><<<<><><<<><><<<>><><>>>><>>>><<<><<<><<<<><<<>>>><<>><>>>><<<<>>>><>><<<<>>><>>>><<<><<<>>>><<<>>><><<<>>>><<<>>><<<<>>><>>><<<<><<<>><<<><><<<>><<><>>>><<>><<>>><<>><<<><>>>><<>><<<>><<>><>>><<<><<<<>>><<>>>><<>>><<<<>>><>>>><<<<>>><<<<>>><<>>><<>>>><<<<><>><<<>>><<<>>><>><<>>><><>><<>>><<<<>><<<<><<<<>>><<<<>>><<>>>><<<<>>>><>>><<<<><<>>>><<>>><>><<<<><<<<>>><<>>><<<<>>><<<><<>><<<<>>><>>>><<<>>>><<>><>><<<><<<>>>><<>>><<<<>>>><<<<>><<<<>>>><<<>>>><<>>><<<<>>><<<>>>><<>>><><>>>><<<<>>><<<<>>><<<>>>><<<<>>>><>>>><<>>>><><<>><>>>><<<<>>><<<<><<<>><>><<>>>><<>><>>><<>><<>>><<>>><<>>>><<<<>><<<<>><<<<>>>><<<<>>>><<>><<<><<>>><<>>><<<<>>><>>>><<><>><><>>><<<>><<<<>>>><<>><<<><<<>>><<<<>>><<>>>><<>><<<>>><<>>>><<>><<>>><<<<>><<<<>><<<><<<>>>><<<>>><<<<>><>><>>><>>>><>>>><<>>>><>>><<<>>><<><>>>><<<<>>><<<>><<<<>><<><>>>><<<<><<><>>><<<<>><<<<>>><<<><<><<<>><>>>><<<<>><<<<>>>><<<>>><><<>>>><<><><<>>><<<<>><<<<>>><>>>><<<>><<<<>>>><<<>>><<<<>>>><<><<<>>><<>>><<<><><<<<><><<>><<<<>>>><<<<>><<<<><<>>>><>><>><<>>>><>>>><<<<>><><<<>><<<>>>><<><<>><<<<>><<><>>>><<<<>><<>><<<>>><>>>><<<<><<<<>><<<><<>>>><<<><<<>>>><<>>>><<<<><>>><<<>>>><<<<>>>><>><>>>><<<>><<>>>><<<>>>><>>>><<<<>>>><<<<>>><<<><<><<<<>><>>>><<<>>><<>><<<<>>><<<<>><>><>>>><>>>><<>><>>>><<<<>>><>>><<<<>><<><<<>>><<>>>><<<<>>>><><><<<>>><<<<><<<<>><<><<<<>><<<>>><<><<<<>>>><<<<>><>><>><><><<><>><<<<>>><<><<<>>><<><<>>>><<<><<<<><<<<><<>>><>>><<>>><<>>>><<><<<<>>>><><<><<>>><><<<<>><>>><><<<<>>><<<<>><<<>>>><<<<><<<>><<<>><<><><<<>><<<>>>><<<><<<><>>><<<<>>><<>><<<>>><<<>>><<<><<><<<<>>><<<><>>>><<><<<>>><>>><<<>>><<<>>>><<<>>><<<>>>><<<><<>>><<>><<<>>>><<<<>><<<<><><<<<>><<>><<<>>><<<>><<<>>><<<<>><<>><>><<<><<>>><<<>>><>>><<<>>><<<>><<<>>>><<<<>><<>><<>><><<<>><<<<>>><<<>>><<<<><>>><<<<>><<<<>>>><<<>>><<<<>><<>>><<>>><<<>>><<<>><<>>>><><<>>>><><<>>><><<<<>>>><<<<>><>><<<<>>><<<>><<<><<>>><<<<><>>><>>><<>>>><<><<<>><<<>>><<<>>><<<>><<>><<><<<<><<<<>>><<<><<<<><<<<><<<><<<><>>><<>>>><>>>><>>><<><<<<><<<>>><<<>>><<><<<<>>>><<<<>>>><<>>>><<>>>><<<<><<>><>><<<><><><>><<<>><<<<>>>><<<<>><<<<>>><<><<<<>><<><>>><<<>><<<><<<<>><><<<<><<<>>><>>><<>>><<>>>><><<>><>>>><<<<><<<<><<><<<>><<<>>>><<>><<>>>><<<<>><<<>><<<><<>><<>>><<>>><<>>><<>>>><<>>><<<<>>><<><<<<>><>><<<><<<>>><<>>>><<<>><>>><<><<<<>>>><>>>><<><>>><<<<><<<><>>>><<<<>>>><<<><>><<<<><<<>>>><<<><<<<>>><<<>><><>><>>>><<<<>>>><>><<<<>>><<>><<<<><<>>>><<<<>><>>><>><<<>>>><>><<<><><<>>>><<<>><<>><>><<><<>><>>><>>><<><><<>>>><<>>>><>>><<>>>><>><";
    println!(
        "Part 1 solution: {:?} (should be 3109)",
        solve_part1(real_input)
    );
    println!(
        "Part 2 test: {:?} (should be 1514285714288)",
        solve_part2(test_input)
    );
    println!(
        "Part 2 solution: {:?} (should be 1541449275365)",
        solve_part2(real_input)
    );
}
